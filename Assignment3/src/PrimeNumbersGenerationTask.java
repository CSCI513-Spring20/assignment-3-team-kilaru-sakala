import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class PrimeNumbersGenerationTask extends Task {
	private int start;
	private int end;
	private ArrayList<Integer> generatedPrimeNumbers;

	// Constructor of the class
	public PrimeNumbersGenerationTask(int start, int end) {
		super("PrimeNumbersGenerationTask:" + start + "," + end);
		generatedPrimeNumbers = new ArrayList<Integer>();
		this.start = start;
		this.end = end;
	}

	// Method to Check if a number is prime or not
	public static boolean isPrime(int value) {
		if( value == 0 || value == 1) {
			return false;
		}
		for (int i = 2; i <= value / 2; ++i) {
			if (value % i == 0) {
				return false;
			}
		}
		return true;
	}

	
	@Override
	public void run() {
		System.out.println("Task [" + this.getName() + "] starts running with " + Thread.currentThread().getName());
		for (int i = start; i <= end; ++i) {
			if (isPrime(i)) {
				generatedPrimeNumbers.add(i);
			}
		}
		System.out.println("Task [" + this.getName() + "] genereated the prime numbers " + Arrays.toString(generatedPrimeNumbers.toArray()) );
		System.out.println("Task [" + this.getName() + "] finished with " + generatedPrimeNumbers.size() + " prime numbers generated by " + Thread.currentThread().getName());
	}


	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

	    System.out.print("Enter the upper limit of input range: ");
	    int upperBound = scanner.nextInt();

	    System.out.print("Enter number of threads required to generate the prime numbers: ");
	    int threadNum = scanner.nextInt();
	
	    System.out.print("Enter number of threads in the thread pool: ");
	    int threadPoolSize = scanner.nextInt();
	    
	    ThreadPool threadPool = new ThreadPool(threadPoolSize);
	    int taskSizePerThread = (int) Math.ceil(upperBound / threadNum);
	
	    ArrayList<PrimeNumbersGenerationTask> tasks = new ArrayList<PrimeNumbersGenerationTask>();
	    int lowerLimit = 0;
	    int upperLimit = lowerLimit + taskSizePerThread;
	    while (upperLimit <= upperBound) {
	      PrimeNumbersGenerationTask task = new PrimeNumbersGenerationTask(lowerLimit, upperLimit - 1);
	      threadPool.execute(task);
	      tasks.add(task);
	      lowerLimit = upperLimit;
	      upperLimit = lowerLimit + taskSizePerThread;
	    }
	
	    threadPool.waitForAllTasks();
	    threadPool.shutdown();
	    scanner.close();
	  }
}

